class SearchListing extends React.Component {
  constructor(props) {
    super(props)

    this.highlight = this.highlight.bind(this);
    this.unhighlight = this.unhighlight.bind(this);
  }

  render() {
    let listing = this.props.listing;

    var roomType;
    switch (listing.roomType) {
    case "private_room":
      roomType = "Private Room";
    case "entire_home":
      roomType = "Entire Home";
    case "shared_room":
      roomType = "Shared Room";
    }

    let listingUrl = "#";
    return (
      <div className="half listing" onMouseEnter={this.highlight} onMouseLeave={this.unhighlight}>
        <a href={listingUrl}>
          <div className="img-container">
            <img src={listing.imagePaths[0]} className="photo" />
            <div className="price-container">
              <div className="inner-price-container">
                <sup>$</sup>{listing.pricePerNight}
              </div>
            </div>

            <div className="portrait-container">
              <div className="portrait-round">
                <img src={listing.hostPortraitPath} />
              </div>
            </div>
          </div>
        </a>

        <div className="title-detail-wrapper">
          <h3 className="title">
            <a href={listingUrl}>{listing.title}</a>
          </h3>

          <div className="details">
            <a href={listingUrl}>{roomType} • Stars • 14 Reviews</a>
          </div>
        </div>
      </div>
    );
  }

  highlight() {
    this.props.focusListing(this.props.listing);
  }

  unhighlight() {
    this.props.focusListing(null);
  }
}

SearchListing.propTypes = {
  listing: React.PropTypes.object.isRequired
};

SearchListing = ReactRedux.connect(
  (searchState) => ({}),
  (dispatch) => ({
    focusListing(listing) {
      dispatch(SearchStateStore.focusListing(listing));
    }
  })
)(SearchListing);
