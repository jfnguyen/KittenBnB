class SearchListing extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      imageIdx: 0
    };

    this.highlight = this.highlight.bind(this);
    this.unhighlight = this.unhighlight.bind(this);
  }

  renderImageContainer() {
    let listing = this.props.listing;
    let imageUrl = listing.imagePaths[this.state.imageIdx];

    let advanceImage = (e) => this.advanceImage(e, 1);
    let reverseImage = (e) => this.advanceImage(e, -1);

    return (
      <div className="img-container">
        <div className="reverse" onClick={reverseImage}>
          <i className="fa fa-chevron-left" />
        </div>

        <img src={imageUrl} className="photo" />
        <div className="advance" onClick={advanceImage}>
          <i className="fa fa-chevron-right" />
        </div>

        <div className="price-container">
          <div className="inner-price-container">
            <sup>$</sup>{listing.pricePerNight}
          </div>
        </div>

        <div className="portrait-container">
          <div className="portrait-round">
            <img src={listing.hostPortraitPath} />
          </div>
        </div>
      </div>
    );
  }

  renderStars() {
    let rating = this.props.listing.rating;
    let starChr = '\uf005';
    let halfStarChr = '\uf089';

    let goldStars = _.times(Math.floor(rating / 2), (idx) => {
      return <span className="gold" key={idx}>{starChr}</span>;
    });

    // Handle the half!
    var halfStar = null;
    if (rating % 2 === 1) {
      halfStar = (
        <span className="half-star">{starChr}</span>
      );
    }

    let numGrayStars = Math.floor((10 - rating) / 2);
    let grayStars = _.times(numGrayStars, (idx) => {
      return <span className="gray" key={idx}>{starChr}</span>;
    });

    return (
      <span className="stars">
        {goldStars}
        {halfStar}
        {grayStars}
      </span>
    );
  }

  render() {
    let listing = this.props.listing;
    let listingUrl = "#";

    let starsSpan = this.renderStars();

    return (
      <div className="half listing" onMouseEnter={this.highlight} onMouseLeave={this.unhighlight}>
        <a href={listingUrl}>
          {this.renderImageContainer()}
        </a>

        <div className="title-detail-wrapper">
          <h3 className="title">
            <a href={listingUrl}>{listing.title}</a>
          </h3>

          <div className="details">
            <a href={listingUrl}>{this.roomType()} • {starsSpan} • 14 Reviews</a>
          </div>
        </div>
      </div>
    );
  }

  advanceImage(event, increment) {
    event.preventDefault();

    let numImages = this.props.listing.imagePaths.length;
    // Mote BS to ensure never negative.
    this.setState({
      imageIdx: ((this.state.imageIdx + numImages + increment) % numImages)
    });
  }

  highlight() {
    this.props.focusListing(this.props.listing);
  }

  roomType() {
    switch (this.props.listing.roomType) {
    case "private_room":
      return "Private Room";
    case "entire_home":
      return "Entire Home";
    case "shared_room":
      return "Shared Room";
    }
  }

  unhighlight() {
    this.props.focusListing(null);
  }
}

SearchListing.propTypes = {
  listing: React.PropTypes.object.isRequired
};

SearchListing = ReactRedux.connect(
  (searchState) => ({}),
  (dispatch) => ({
    focusListing(listing) {
      dispatch(SearchStateStore.focusListing(listing));
    }
  })
)(SearchListing);
