class SearchDatesForm extends React.Component {
  componentDidMount() {
    let $dateRangeStartInput = $(this.refs.dateRangeStartInput);
    let $dateRangeEndInput = $(this.refs.dateRangeEndInput);

    $dateRangeStartInput.daterangepicker({
      autoApply: true,
      drops: "down",
      minDate: moment().startOf('day'),
      singleDatePicker: true,
    });

    $dateRangeStartInput.on("apply.daterangepicker", (e) => {
      let dateRangeStart = moment(new Date(e.target.value));
      let dateRangeEnd = moment(new Date(this.props.dateRangeEnd));

      let invalidDateRangeEnd = !dateRangeStart.isBefore(dateRangeEnd)
      if (invalidDateRangeEnd) {
        dateRangeEnd = dateRangeStart.clone().add(1, 'day');
      }

      this.props.onValuesChange({
        dateRangeStart: dateRangeStart.format("MM/DD/YYYY"),
        dateRangeEnd: dateRangeEnd.format("MM/DD/YYYY"),
      });

      if (invalidDateRangeEnd) {
        $dateRangeEndInput.trigger("click");
      } else {
        this.props.fetchResults();
      }
    });

    $dateRangeEndInput.daterangepicker({
      autoApply: true,
      drops: "down",
      singleDatePicker: true,
      isInvalidDate: (date) => {
        let dateRangeStart = this.props.dateRangeStart;
        let dateRangeEnd = moment(date);
        return !dateRangeEnd.isAfter(new Date(dateRangeStart));
      }
    })

    $dateRangeEndInput.on("apply.daterangepicker", (e) => {
      this.props.onStringValueChange("dateRangeEnd", e);
      this.props.fetchResults();
    });
  }

  render() {
    let numGuestsChangeHandler = (event) => {
      this.props.onIntValueChange("numGuests", event);
      this.props.fetchResults();
    };

    return (
      <div className="form-row">
        <label>Dates</label>

        <div className="inline-inputs">
          <div className="inline-input">
            <input type="text"
                 ref="dateRangeStartInput"
                 value={this.props.dateRangeStart}
                 readOnly />
          </div>

          <div className="inline-input">
            <input type="text"
                   ref="dateRangeEndInput"
                   value={this.props.dateRangeEnd}
                   readOnly />
          </div>

          <div className="inline-input">
            <NumGuestsSelect value={this.props.numGuests}
                             onChange={numGuestsChangeHandler} />
          </div>
        </div>
      </div>
    );
  }
}

SearchDatesForm.propTypes = {
  dateRangeStart: React.PropTypes.string.isRequired,
  dateRangeEnd: React.PropTypes.string.isRequired,
  numGuests: React.PropTypes.number.isRequired,
};

SearchDatesForm = ReactRedux.connect(
  (searchState) => ({
    dateRangeStart: searchState.params.dateRangeStart,
    dateRangeEnd: searchState.params.dateRangeEnd,
    numGuests: searchState.params.numGuests,
  }),
  SearchStateStore.onChangeCallbacks,
)(SearchDatesForm);
