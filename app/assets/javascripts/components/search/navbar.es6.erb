class SearchNavbar extends React.Component {
  constructor(props) {
    super(props);

    this.state = { location: this.props.location };
  }

  componentDidMount() {
    let autocomplete = new google.maps.places.Autocomplete(
      this.refs.locationInput, {
        types: ['(cities)']
      }
    );

    // Only want to make change to store location when they've
    // selected from the autocompletion dropdown.
    autocomplete.addListener("place_changed", () => {
      let place = autocomplete.getPlace();
      let placeAddress = place.formatted_address;
      let geoCenter = {
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng()
      };

      this.setState({
        location: placeAddress
      });

      this.props.onValuesChange({
        location: placeAddress,
        geoCenter: geoCenter
      });
    });
  }

  render() {
    return (
      <nav className="my-navbar">
        <div className="brand">
          <a href="/">‚ù§ kittenbnb</a>
        </div>

        <div className="nav-search-bar">
          <i className="fa fa-search" aria-hidden="true"></i>
            <input type="text"
                   value={this.state.location}
                   ref="locationInput"
                   onChange={(e) => this.setState({location: e.target.value})} />
        </div>

        <div className="items">
          <div className="item"><a href="#" onClick={AboutModal.show}>Help</a></div>
          <div className="item"><a href="#" onClick={AboutModal.show}>Sign Up</a></div>
          <div className="item"><a href="#" onClick={AboutModal.show}>Log In</a></div>
        </div>
      </nav>
    );
  }
}

SearchNavbar = ReactRedux.connect(
  (searchState) => ({
    location: searchState.params.location
  }),
  SearchStateStore.onChangeCallbacks
)(SearchNavbar)
