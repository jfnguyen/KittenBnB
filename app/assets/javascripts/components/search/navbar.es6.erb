class SearchNavbar extends React.Component {
  constructor(props) {
    super(props);

    this.state = { location: this.props.location };
  }

  componentDidMount() {
    let autocomplete = new google.maps.places.Autocomplete(
      this.refs.locationInput, {
        types: ['(cities)']
      }
    );

    // Only want to make change to store location when they've
    // selected from the autocompletion dropdown.
    autocomplete.addListener("place_changed", () => {
      let place = autocomplete.getPlace();
      let placeAddress = place.formatted_address;
      let geoCenter = {
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng()
      };

      this.setState({
        location: placeAddress
      });

      this.props.onValuesChange({
        location: placeAddress,
        geoCenter: geoCenter
      });
    });
  }

  render() {
    return (
      <nav className="navbar search-nav">
        <div className="container-fluid">
          <div className="nav navbar-left">
            <a className="brand-link" href="/">
              ‚ù§ kittenbnb
            </a>
          </div>

          <div className="nav navbar-left search-bar">
            <i className="fa fa-search" aria-hidden="true"></i>
              <input type="text"
                     value={this.state.location}
                     ref="locationInput"
                     onChange={(e) => this.setState({location: e.target.value})} />
          </div>

          <ul className="nav navbar-nav navbar-right">
            <li><a href="#">Help</a></li>
            <li><a href="#">Sign Up</a></li>
            <li><a href="#">Log In</a></li>
          </ul>
        </div>
      </nav>
    );
  }
}

SearchNavbar = ReactRedux.connect(
  (searchState) => ({
    location: searchState.params.location
  }),
  SearchStateStore.onChangeCallbacks
)(SearchNavbar)
