class SearchRoomTypeForm extends React.Component {
  render() {
    let changeHandlers = _([
      "entireHome",
      "privateRoom",
      "sharedRoom",
    ]).map((propName) => {
      return [propName, (event) => {
        this.props.onBoolValueChange(propName, !(this.props[propName]))
        this.props.fetchResults();
      }];
    }).fromPairs().value();

    return (
      <div className="form-row">
        <label>Room Type</label>

        <div className="inline-inputs">
          <div className="inline-input">
            <div className="mycheckbox">
              <img src="<%= image_url "home_airglyphs.svg" %>" className="icon" />
              Entire home/apt

             <input type="checkbox"
                    value={this.props.entireHome}
                    onChange={changeHandlers.entireHome} />
            </div>
          </div>

          <div className="inline-input">
            <div className="mycheckbox">
              <img src="<%= image_url "private-room_airglyphs.svg" %>" className="icon" e/>
              Private room

             <input type="checkbox"
                    value={this.props.entireHome}
                    onChange={changeHandlers.privateRoom} />
            </div>
          </div>

          <div className="inline-input">
            <div className="mycheckbox">
              <img src="<%= image_url "shared-room_airglyphs.svg" %>" className="icon" />
              Shared room

             <input type="checkbox"
                    value={this.props.entireHome}
                    onChange={changeHandlers.sharedRoom} />
            </div>
          </div>
        </div>
      </div>
    );
  }
}

SearchRoomTypeForm.propTypes = {
  entireHome: React.PropTypes.bool.isRequired,
  privateRoom: React.PropTypes.bool.isRequired,
  sharedRoom: React.PropTypes.bool.isRequired,
};

SearchRoomTypeForm = ReactRedux.connect(
  (searchState) => ({
    entireHome: searchState.params.entireHome,
    privateRoom: searchState.params.privateRoom,
    sharedRoom: searchState.params.sharedRoom,
  }),
  SearchStateStore.onChangeCallbacks,
)(SearchRoomTypeForm);
